# This file is a template, and might need editing before it works on your project.
# Official docker image.
# image: ${CI_REGISTRY}:443/docker:18.09.7
# image: ${CI_REGISTRY}:443/docker:18.09.7-git
image: ${CI_REGISTRY}/mycicdpipeline/cicdpipelinewithtestingstage/docker:latest

services:
  # - docker:18.09.7-dind
  # - name: ${CI_REGISTRY}:443/docker:18.09.7-dind
  #   alias: docker
  - name: ${CI_REGISTRY}/mycicdpipeline/cicdpipelinewithtestingstage/docker:20.10.17-dind
    alias: docker

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2375 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2375
  #
  #
  # This will instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  DOCKER_VIRTUAL_REPO: "${CI_REGISTRY}"
  DOCKER_DEV_VIRTUAL_REPO: "${CI_REGISTRY}"
  DOCKER_DEV_FIRSTPARTY_REPO: "${DOCKER_DEVELOPMENT_LOCAL}.${ARTIFACTORY_ADDRESS}"
  DOCKER_DEV_FIRSTPARTY_IMAGE: "${DOCKER_DEVELOPMENT_LOCAL}/$CI_PROJECT_PATH"
  ARTIFACTORY_USER_PASS: "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD"
  ARTIFACTORY_URL: "registry.gitlab.com/mycicdpipeline/cicdpipelinewithtestingstage"
  name: $CI_PROJECT_NAME


stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

before_script:
  - mkdir ~/.docker
  - echo ${DOCKER_AUTH_CONFIG} > ~/.docker/config.json
  - docker info
  - docker images
# to use Artifactory as a source of alpine packages
  - sed -i 's,.*alpine,'"${GENERIC_ALPINELINUX_REPO}"',g' /etc/apk/repositories
  - export APP_VERSION=${CI_COMMIT_TAG:-$(git describe --tags)}


probe:
  tags:
    - docker
  stage: build
  script:
    - echo $DOCKER_DEVELOPMENT_LOCAL
    - echo $DOCKER_DEV_FIRSTPARTY_IMAGE
    - echo $CI_PROJECT_PATH
    - echo $DOCKER_DEV_VIRTUAL_REPO
    - echo $name
    - echo $ARTIFACTORY_USER_PASS
    - export SERVICE_NAME=probe
    - export CI_REGISTRY_IMAGE="$DOCKER_DEV_FIRSTPARTY_IMAGE/$SERVICE_NAME"
    - echo $CI_REGISTRY_IMAGE
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build
      --label version=$APP_VERSION
      --label CI_PROJECT_ID=$CI_PROJECT_ID --label CI_PIPELINE_ID=$CI_PIPELINE_ID
      --label CI_JOB_ID=$CI_JOB_ID --label CI_PROJECT_URL=$CI_PROJECT_URL
      --label CI_COMMIT_SHA=$CI_COMMIT_SHA --label CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
      --build-arg ARTIFACTORY_USER_PASS=$ARTIFACTORY_USER_PASS
      --build-arg ARTIFACTORY_URL=$ARTIFACTORY_URL
      --build-arg CI_REGISTRY=${CI_REGISTRY}
      --build-arg GENERIC_ALPINELINUX_REPO=${GENERIC_ALPINELINUX_REPO}
      --build-arg BUILDKIT_INLINE_CACHE=1
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$APP_VERSION
      --tag $CI_REGISTRY_IMAGE:latest
      services/$SERVICE_NAME
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker images
    - docker push "$CI_REGISTRY_IMAGE:${APP_VERSION}"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*).(0|[1-9]\d*)$/
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*).(0|[1-9]\d*).(0|[1-9]\d*)$/
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: ${CI_REGISTRY}/mycicdpipeline/cicdpipelinewithtestingstage/docker:latest
  before_script:
    - echo "Deploying application..."
    #- apk add openssh-client
    - mkdir -p ~/.ssh
    - echo -n "$EC2_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - ssh-keyscan -H $MASTER_NODE >> ~/.ssh/known_hosts
    - ls -ll
    - ls -lart ~/.ssh/
    - export SERVICE_NAME=probe
    - export APP_STACK=probe
    - export CI_REGISTRY_IMAGE="$DOCKER_DEV_FIRSTPARTY_IMAGE/$SERVICE_NAME"
    - export APP_VERSION=${CI_COMMIT_TAG:-$(git describe --tags)}
  script:    
    - ssh -tt $HOST_USER@$MASTER_NODE docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE
    - echo $PREVIOUS_VERSION
    - echo $APP_VERSION
    - scp .env .env.vault.local $HOST_USER@$MASTER_NODE:~
    - ssh -tt $HOST_USER@$MASTER_NODE "chmod 700 ~/.env; source ~/.env"
    - ssh -tt $HOST_USER@$MASTER_NODE docker pull "$CI_REGISTRY_IMAGE:$APP_VERSION"
    - scp docker-compose.yml $HOST_USER@$MASTER_NODE:~
    - ssh -tt $HOST_USER@$MASTER_NODE "docker stack rm $APP_STACK; sleep 10s" || true
    - ssh -tt $HOST_USER@$MASTER_NODE "export APP_VERSION=$APP_VERSION CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE; chmod 700 ~/docker-compose.yml; docker stack deploy --with-registry-auth -c ~/docker-compose.yml $APP_STACK"
    - echo "Application successfully deployed ."
    - echo "Removing the docker image from HOST Server after deployment..."
    - ssh -tt $HOST_USER@$MASTER_NODE docker image rm "$CI_REGISTRY_IMAGE:$APP_VERSION; docker image prune -f" || true

  dependencies:
    - probe

  only:
    - tags
